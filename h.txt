#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include "pqueue.h"

#define CHAR_RANGE 256 // ASCII characters
#define BUFFER_SIZE 1000 // Size of the buffer for writing bits

//new - start
typedef struct st_Data Data;
struct st_Data {
    unsigned char buffer[BUFFER_SIZE];
    FILE* file;
    size_t size;
    size_t pos;
    size_t bitpos;
};

///Коды символов
typedef struct st_Code {
    unsigned char buffer[256];///< 256 - Худший вариант для длины кода, больше быть не может
    size_t len;
} Code;

binIObuff* init_binIO(FILE* file, unsigned int mode) {

    binIObuff* newbuff = malloc(sizeof(binIObuff));

    if (newbuff == NULL) {
        return NULL;
    }

    newbuff->buff = malloc(BUFFER_SIZE);

    if (newbuff->buff == NULL) {
        free(newbuff);
        return NULL;
    }

    memset(newbuff->buff, 0, BUFFER_SIZE);

    newbuff->file = file;
    newbuff->buff_pos = mode;
    newbuff->byte_pos = 0;

    return newbuff;
}
//+
void freq_count(FILE* input, size_t* c_freq, unsigned int* len) {
    uint8_t buff[BUFFER_SIZE];///< Считывать по одному символу слишком медленно
    size_t fsize = 0;

    while ((fsize = fread(buff, sizeof(char), BUFFER_SIZE, input)) > 0) {
        for (size_t i = 0; i < fsize; ++i) {
            c_freq[buff[i]]++;
        }
        (*len) += fsize;
    }
}
//+
void free_huffman_tree(Node* node) {
    if (node) {
        free_huffman_tree(node->left);
        free_huffman_tree(node->right);
        free(node);
    }
}

void writesym(Data* out, int sym) {
    if (out->bitpos == 0) {
        out->buffer[out->pos] = (unsigned char)sym;
        ++out->pos;
    }
    else {
        out->buffer[out->pos] |= sym >> out->bitpos;
        out->buffer[out->pos + 1] = sym << (8 - out->bitpos);
    }
    ++out->pos;
}

int getbit(Data* in) {
    if (++in->bitpos >= 8) {
        in->bitpos = 0;
        if (++in->pos >= in->size) {
            in->size = fread(in->buffer, 1, BUFFER_SIZE, in->file);
            in->pos = 0;
        }
    }
    int byte = in->buffer[in->pos];
    int bit = (byte >> in->bitpos == 8) & 1;

    return bit;
}
//+
Node* create_node(unsigned char ch, long long freq, Node* left, Node* right) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->ch = ch;
    node->freq = freq;
    node->left = left;
    node->right = right;
    return node;
}

void fill_table(unsigned char* code_table[256], Node* root, unsigned char path[256], size_t length) {
    if (!root) return;

    if (root->left != NULL) {
        path[length] = '0';
        fill_table(code_table, root->left, path, length + 1);
        path[length] = '1';
        fill_table(code_table, root->right, path, length + 1);
    }
    else {
        path[length] = 0;
        code_table[root->ch] = strcpy((unsigned char*)malloc(length + 1), path, length + 1);
    }
}

void write_tree(Node* root, Data* out) {
    if (!root) return;

    if (root->left != NULL) {
        out->buffer[out->pos] |= 128 >> out->bitpos;
        out->bitpos++;

        if (out->bitpos == 8) {
            out->bitpos = 0;
            out->pos++;
        }
        write_tree(root->left, out);
        write_tree(root->right, out);
    }
    else {
        if (++(out->bitpos) == 8) {
            out->bitpos = 0;
            ++(out->pos);
        }
        //printf("%c ", root->ch);

        writesym(out, root->ch);
    }
}

//unsigned char getbyte(Data* in) {
//    return in->;
//}
//Node* restore_tree(Data* in) {
//    Node* nd = malloc(sizeof(Node));
//    int bit = getbit(in);
//    if (bit) { // если 1 -- дальше лист, иначе листа нет
//        nd->left = nd->right = NULL;
//        nd->ch = getbyte(in);
//    }
//    else {
//        nd->left = restore_tree(in);
//        nd->right = restore_tree(in);
//    }
//
//    return nd;
//}

void decode(Data* in, Data* out, Node* tree, size_t out_count) {
    size_t size = (size_t)in->buffer[0] << 24 +
        (size_t)in->buffer[1] << 16 +
        (size_t)in->buffer[2] << 8 +
        (size_t)in->buffer[3];
    size_t i = 0;
    while (i < out_count) {
        Node* cur = tree;
        while (cur->left != NULL) {
            if (getbit(in)) cur = cur->right;
            else cur = cur->left;
        }
        out->buffer[out->pos++] = cur->ch;
        if (out->pos >= BUFFER_SIZE) {
            fwrite(out->buffer, 1, out->pos, out->file);
            out->pos = 0;
        }
        i++;
    }
    fwrite(out->buffer, 1, out->pos, out->file);
}
//+
int cmp(const void* a, const void* b) { // Функция для КуСорта, естесна не в mktree
    return (*(Node**)b)->freq - (*(Node**)a)->freq;
}

Node* mk_tree(FILE* in, unsigned int* count) {
    size_t freq[CHAR_RANGE] = { 0 };
    
    freq_count(in, freq, count);

    /*for (int i = 0; i < CHAR_RANGE; i++) {
        if (freq[i] > 0) {
            printf("Character '%c' has frequency %lld\n", i, freq[i]);
        }
    }*/

    //Pqueue* pq = NULL;
    //int zero = 0;

    //for (int i = 0; i < 256; ++i) {
    //    if (freq[i] != 0) {
    //        zero = 1;
    //        if (push(&pq, (unsigned char)i, freq[i], NULL, NULL)) {
    //            //perror("Archiving error: Not enough RAM \n");
    //            deletepqueue(&pq);
    //            return NULL;
    //        }
    //    }
    //}
    //if (zero)
    //{
    //    while (!isLast(&pq)) {
    //        Node* right = pop(&pq);
    //        Node* left = pop(&pq);
    //        push(&pq, 0, left->freq + right->freq, left, right);
    //    }
    //    return pop(&pq);
    //}
    //return 0;

    Node* slice[256] = { 0 };
    size_t n = 0;
    for (int i = 0; i < CHAR_RANGE; i++) {
        if (freq[i] != 0) {
            slice[n++] = create_node((unsigned char)i, freq[i], NULL, NULL);
        }
    }

    while (n > 1) {
        qsort(slice, n, sizeof(Node*), cmp);

        Node* node = (Node*)malloc(sizeof(Node));
        node->left = slice[n - 2];
        node->right = slice[n - 1];
        node->freq = slice[n - 2]->freq + slice[n - 1]->freq;
        //for (int i = 0; i < n; i++) {
        //    printf("%lld ", slice[i]->freq);
        //}
        node->ch = 0;
        slice[n - 2] = node;
        n--;
    }

    return slice[0];
}
//+
unsigned char** create_code_table() {
    unsigned char** codeTable = (unsigned char**)malloc(CHAR_RANGE * sizeof(unsigned char*));
    for (int i = 0; i < CHAR_RANGE; i++) {
        codeTable[i] = NULL;
    }
    return codeTable;
}

int tree_traversal(binIObuff* out, Node* node, Code** table, size_t pos, unsigned char* buff) {

    if (isLeaf(node)) {
        if (write_bit(out, 1)) {
            return 1;
        }

        if (write_byte(out, node->ch)) {
            return 1;
        }

        buff[pos] = 0;

        table[node->ch] = (Code*)malloc(sizeof(Code));

        if (table[node->ch] == NULL) {
            return 1;
        }

        strcpy((char*)table[node->ch]->buffer, (char*)buff);
        table[node->ch]->len = pos;

        return 0;
    }

    if (write_bit(out, 0)) {
        return 1;
    }

    buff[pos] = '0';
    if (tree_traversal(out, node->left, table, pos + 1, buff)) {
        return 1;
    }

    buff[pos] = '1';
    if (tree_traversal(out, node->right, table, pos + 1, buff)) {
        return 1;
    }

    return 0;
}

int encode(char* outputFilename, Data* in) {
    FILE* fout = fopen(outputFilename, "wb");

    unsigned int count = 0;

    Node* root = mk_tree(in->file, &count);
    if (count == 0) {
        fclose(fout);
        return 0;
    }
    binIObuff* outbuff = init_binIO(fout, 0);

    unsigned char file_size[4];
    file_size[0] = (unsigned char)((count >> 24) & 0xFF);
    file_size[1] = (unsigned char)((count >> 16) & 0xFF);
    file_size[2] = (unsigned char)((count >> 8) & 0xFF);
    file_size[3] = (unsigned char)((count) & 0xFF);

    fwrite(file_size, 1, 4, outbuff->file);

    Code* codes[256] = { 0 };
    unsigned char in_tmpbuff[1000];
    tree_traversal(outbuff, root, codes, 0, in_tmpbuff);

    delete_tree(root);

    nextbyte(outbuff);

    size_t buff_len = 0;

    unsigned char* code;
    fseek(in->file, sizeof(char), 0);

    unsigned int completed_len = 0;
    while ((buff_len = fread(in_tmpbuff, 1, 1000, in->file))) {
        completed_len += buff_len;
        size_t buff_pos = 0;

        while (buff_len > 0) {
            code = codes[in_tmpbuff[buff_pos]]->buffer;

            size_t code_len = codes[in_tmpbuff[buff_pos++]]->len;

            for (size_t pos = 0; pos < code_len; pos++) {

                if (write_bit(outbuff, code[pos] - '0')) {
                    //fprintf(stderr, "Archiving error: Not enough memory \n");
                    deleteIObuff(outbuff);
                    return 1;
                }

            }

            buff_len--;
        }
    }

    if (endwriting(outbuff)) {
        //fprintf(stderr, "Archiving error: Not enough memory \n");
        return 1;
    }
    //free_huffman_tree(root);
    fclose(fout);
}

static int read_tree(binIObuff* in, Node** root) {
    int bit = 0;

    Node* node = NULL;

    bit = read_bit(in);
    
    if (bit == 0) {
        node = create_node('\0', 0, NULL, NULL);

        if (!node) {
            return 1;
        }

        if (read_tree(in, &node->left)) {
            free(node);
            return 1;
        }

        if (read_tree(in, &node->right)) {
            free(node);
            return 1;
        }

    }
    else {

        unsigned char byte = read_byte(in);
        //printf("%c ", byte);
        node = create_node(byte, 0, NULL, NULL);

        if (!node) {
            return 1;
        }
    }

    *root = node;

    return 0;
}

int decoder(FILE* infile, const char* output_file_name) {

    FILE* fout = fopen(output_file_name, "wb");

    if (fout == NULL) {
        //perror("can`t create Unpacked file. Not enough memory.");
        return 1;
    }

    unsigned char file_size[4];

    size_t check = fread(file_size, 1, 4, infile);
    //printf("%d ", check);
    if (check == 0) {

        //fprintf(stderr, "File is empty\n");

        fclose(infile);
        fclose(fout);

        return 0;
    }

    unsigned int len = ((unsigned int)file_size[0] << 24) + ((unsigned int)file_size[1] << 16) +
        ((unsigned int)file_size[2] << 8) + (unsigned int)file_size[3];
    //printf("%d ", len);
    binIObuff* inbuff = init_binIO(infile, 1000);

    if (inbuff == NULL) {
        //fprintf(stderr, "Unpacking error: Not enough RAM \n");
        fclose(infile);
        fclose(fout);
        return 1;
    }

    Node* root = NULL;

    if (read_tree(inbuff, &root)) {
        fclose(infile);
        fclose(fout);
        return 1;
    }

    Node* n = root;

    unsigned char output_buff[BUFFER_SIZE] = { 0 };

    size_t output_pos = 0;

    nextbyte(inbuff);

    int bit = 0;

    unsigned int completed_len = 0;

    while (len > 0) {

        if (isLeaf(n)) {

            output_buff[output_pos++] = n->ch;
            
            if (output_pos == BUFFER_SIZE) {
                fwrite(output_buff, 1, BUFFER_SIZE, fout);

                completed_len += output_pos;
                output_pos = 0;
            }

            n = root;

            len--;
        }
        else {
            
            bit = read_bit(inbuff);

            if (bit) {
                n = n->right;
            }
            else {
                n = n->left;
            }
        }
    }

    fwrite(output_buff, 1, output_pos, fout);

    deleteIObuff(inbuff);

    delete_tree(root);

    fclose(infile);

    fclose(fout);

    return 0;
}


int main(void) {
    Data in;
    in.file = fopen("in.txt", "rb");
    char mode;
    if (!fread(&mode, sizeof(char), 1, in.file))
        exit(0);


    if (mode == 'c') {
        encode("out.txt", &in);

        fclose(in.file);
    }
    else if (mode == 'd') {
        decoder(in.file, "out.txt");
    }

    return 0;
}










// C code to implement Priority Queue
// using Linked List
#include <stdio.h>
#include <stdlib.h>
#include "pqueue.h"
#define BUFFER_SIZE 1000

int isLeaf(Node* node) {
    return (node->right == NULL) & (node->left == NULL);
}

void delete_tree(Node* tree) {

    if (tree == NULL) {
        return;
    }

    delete_tree(tree->left);
    delete_tree(tree->right);

    free(tree);
}

int write_bit(binIObuff* out, int bit) {
    out->buff[out->buff_pos] += (bit & 0x01) << (7 - out->byte_pos++);

    if (out->byte_pos > 7) {
        out->byte_pos = 0;

        if (out->buff_pos == BUFFER_SIZE - 1) {
            if ((fwrite(out->buff, 1, BUFFER_SIZE, out->file)) != BUFFER_SIZE) {
                return 1;
            }
            out->buff_pos = 0;

            memset(out->buff, 0, BUFFER_SIZE);
            return 0;
        }

        out->buff_pos++;
    }

    return 0;
}

int write_byte(binIObuff* out, unsigned char byte) {
    for (int i = 7; i >= 0; i--) {
        if (write_bit(out, (byte >> i) & 0x01)) {
            return 1;
        }
    }
    return 0;
}

int read_bit(binIObuff* in) {
    if (in->byte_pos > 7) {
        in->buff_pos++;
        in->byte_pos = 0;
    }
    
    if (in->buff_pos == BUFFER_SIZE) {

        if (fread(in->buff, 1, BUFFER_SIZE, in->file)) {

            in->buff_pos = 0;
            in->byte_pos = 0;

        }

    }

    return ((in->buff[in->buff_pos]) >> (7 - in->byte_pos++)) & 0x01;
}

unsigned char read_byte(binIObuff* in) {
    unsigned char byte = 0;

    for (int i = 7; i >= 0; i--) {
        byte += (read_bit(in) << i);
    }

    return byte;
}

int endwriting(binIObuff* out) {
    if (fwrite(out->buff, 1, out->buff_pos + (size_t)(out->byte_pos ? 1 : 0), out->file) !=
        (out->buff_pos + (size_t)(out->byte_pos ? 1 : 0))) {

        deleteIObuff(out);
        return 1;
    }
    deleteIObuff(out);

    return 0;
}

void deleteIObuff(binIObuff* out) {
    free(out->buff);
    free(out);
}

void nextbyte(binIObuff* buff) {
    buff->buff_pos += buff->byte_pos ? 1 : 0;
    buff->byte_pos = 0;
}


Node* newHuffNode(unsigned char d, size_t p, Node* left, Node* right) {
    Node* newNode = (Node*)malloc(sizeof(Node));

    if (newNode == NULL) {
        return NULL;
    }

    newNode->ch = d;
    newNode->freq = p;
    newNode->left = left;
    newNode->right = right;

    return newNode;
}

// Function to Create A New Pqueue
struct pqueue* newPqueue(unsigned char d, size_t p, Node* left, Node* right) {

    Node* node = newHuffNode(d, p, left, right);

    if (node == NULL) {
        return NULL;
    }

    struct pqueue* temp = (struct pqueue*)malloc(sizeof(struct pqueue));

    if (temp == NULL) {
        free(node);
        return NULL;
    }

    temp->value = node;
    temp->priority = p;
    temp->next = NULL;

    return temp;
}

// Removes the element with the
// highest priority form the list
Node* pop(struct pqueue** head) {

    Node* res = (*head)->value;

    struct pqueue* temp = *head;
    (*head) = (*head)->next;
    free(temp);

    return res;
}

// Function to push according to priority
int push(struct pqueue** head, unsigned char d, size_t p, Node* left, Node* right) {
    struct pqueue* start = (*head);

    if (start == NULL) {
        *head = newPqueue(d, p, left, right);

        if (*head == NULL) {
            return 1;
        }

        return 0;
    }

    // Create new Pqueue
    struct pqueue* temp = newPqueue(d, p, left, right);

    if (temp == NULL) {
        return 1;
    }

    // Special Case: The head of list has lesser
    // priority than new node. So insert new
    // node before head node and change head node.
    if ((*head)->priority > p) {

        // Insert New Pqueue before head
        temp->next = *head;
        (*head) = temp;

    }
    else {

        // Traverse the list and find a
        // position to insert new node
        while (start->next != NULL &&
            start->next->priority < p) {
            start = start->next;
        }

        // Either at the ends of the list
        // or at required position
        temp->next = start->next;
        start->next = temp;
    }
    return 0;
}

void deletepqueue(struct pqueue** head) {
    while (!isLast(head)) {
        pop(head);
    }
    pop(head);
}

int isLast(struct pqueue** head) {
    return (*head)->next == NULL;
}







#pragma once
#include <stdio.h>
#include <stdlib.h>

typedef struct st_Node Node;
struct st_Node {
    unsigned char ch; // Character
    long long freq; // Frequency of the character
    struct Node* left; // Left child
    struct Node* right; // Right child
};
typedef struct binIObuff {
    FILE* file;///< файл для ввода вывода
    char* buff;///< Буффер для ускорения работы, размер задается макросом BLOCKSIZE

    size_t byte_pos;///< Позиция бита в байте
    size_t buff_pos;///< Позиция байта в буффере
} binIObuff;

typedef struct pqueue Pqueue;
struct pqueue {
    Node* value;
    // Lower values indicate higher priority
    size_t priority;
    struct pqueue* next;
};
int push(Pqueue** head, unsigned char d, size_t p, Node* left, Node* right);

Pqueue* newPqueue(unsigned char d, size_t p, Node* left, Node* right);

Node* pop(Pqueue** head);

int isLast(Pqueue** head);

void deletepqueue(Pqueue** head);

void deleteIObuff(binIObuff* out);

int endwriting(binIObuff* out);

int write_bit(binIObuff* out, int bit);

int write_byte(binIObuff* out, unsigned char byte);

int read_bit(binIObuff* in);

unsigned char read_byte(binIObuff* in);

void nextbyte(binIObuff* buff);

int isLeaf(Node* node);

void delete_tree(Node* tree);

int endwriting(binIObuff* out);